import sqlite3
import requests
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMIN_CHAT_ID = 1254080795

class HotWheelsMonitor:
    def __init__(self, token):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.init_db()
        self.setup_handlers()
        
        self.products = [
            {
                'id': 'hw_265193', 
                'name': 'Hot Wheels Basic Car',
                'product_id': '265193',
                'store_id': '3223',
                'store': '–õ–µ–Ω—Ç–∞ (—Ç–≤–æ–π –º–∞–≥–∞–∑–∏–Ω)'
            },
        ]

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('hotwheels.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stock_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT,
                store_id TEXT,
                quantity INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT,
                old_quantity INTEGER,
                new_quantity INTEGER,
                increase INTEGER,
                acknowledged BOOLEAN DEFAULT FALSE,
                message_id INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if user_id != ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", callback_data="current_stock")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Hot Wheels Monitor\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if user_id != ADMIN_CHAT_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        if query.data == "current_stock":
            await self.send_current_stock(query)
        elif query.data == "statistics_menu":
            await self.show_statistics_menu(query)
        elif query.data.startswith("stats_"):
            period = query.data.replace("stats_", "")
            await self.show_statistics(query, period)
        elif query.data == "back_to_main":
            await self.back_to_main(query)

    async def send_current_stock(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞"""
        await query.edit_message_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å...")
        
        product = self.products[0]
        current_stock = await self.get_current_stock(product['product_id'], product['store_id'])
        
        if current_stock is not None:
            message = (
                f"üìä –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n"
                f"üéØ {product['name']}\n"
                f"üè™ {product['store']}\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {current_stock} —à—Ç.\n"
                f"‚è∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}"
            )
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", callback_data="current_stock")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    async def show_statistics_menu(self, query):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data="stats_week")],
            [InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data="stats_month")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=reply_markup
        )

    async def show_statistics(self, query, period):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        await query.edit_message_text("üìä –§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        stats = self.get_statistics(period)
        
        if not stats:
            message = "üìä –î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç"
        else:
            message = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n\n"
            previous_stock = None
            
            for date_str, stock in stats:
                if previous_stock is not None and stock > previous_stock:
                    message += f"{date_str} - {stock} —à—Ç. üöÄ –ó–ê–í–û–ó!\n"
                else:
                    message += f"{date_str} - {stock} —à—Ç.\n"
                previous_stock = stock
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data="stats_week")],
            [InlineKeyboardButton("üìÖ –ú–µ—Å—è—Ü", callback_data="stats_month")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)

    def get_statistics(self, period):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î"""
        conn = sqlite3.connect('hotwheels.db')
        cursor = conn.cursor()
        
        if period == "week":
            date_filter = datetime.now() - timedelta(days=7)
        else:  # month
            date_filter = datetime.now() - timedelta(days=30)
        
        cursor.execute('''
            SELECT DATE(timestamp), MAX(quantity) 
            FROM stock_history 
            WHERE product_id = ? AND timestamp > ?
            GROUP BY DATE(timestamp)
            ORDER BY DATE(timestamp)
        ''', (self.products[0]['id'], date_filter))
        
        stats = cursor.fetchall()
        conn.close()
        return stats

    async def back_to_main(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìä –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", callback_data="current_stock")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Hot Wheels Monitor\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def get_current_stock(self, product_id, store_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —á–µ—Ä–µ–∑ API –õ–µ–Ω—Ç—ã"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json, text/plain, */*',
            }
            
            params = {'id': product_id, 'storeId': store_id}
            url = 'https://lenta.com/api-gateway/v1/catalog/items/stock'
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            stock = data.get('stock', 0)
            
            logger.info(f"üì¶ API –õ–µ–Ω—Ç—ã: –æ—Å—Ç–∞—Ç–æ–∫ {stock} —à—Ç.")
            return stock
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return None

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...")
        await self.application.run_polling()
